name: Deploy Updated Modules

on:
  pull_request
  # push:
  #   branches:
  #     - main

jobs:
  extract_target_modules:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout triggering commit
        uses: actions/checkout@v4

      - name: 2. Extract changed files
        id: files
        run: |
          git fetch origin main
          git diff --name-only origin/main..HEAD > changed_files.txt
          cat changed_files.txt

      - name: 3. Extract changed modules
        id: dirs
        run: |
          changed_dirs=$(cat changed_files.txt | grep -E '^(web|database|ml|batch)/' | cut -d'/' -f1 | sort | uniq | tr '\n' ' ')
          echo "$changed_dirs" > target_dirs.txt
          cat target_dirs.txt

      - name: 4. Save Job Outputs
        id: target_dirs
        run: |
          echo "dirs=$(cat target_dirs.txt)" >> $GITHUB_OUTPUT
    outputs:
      DIRS: ${{ steps.target_dirs.outputs.dirs }}

  build_images:
    runs-on: ubuntu-latest
    needs: extract_target_modules
    steps:
      - name: 1. Checkout triggering commit
        uses: actions/checkout@v4

      - name: 2. Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 3. Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_TOKEN}}

      - name: 4. Build and push Images
        id: build
        env:
          DIRS: ${{needs.extract_target_modules.outputs.DIRS}}
        run: |
          target_dirs=($DIRS)
          echo "[CD] ${#target_dirs[@]} directories were changed"
          for dir in ${target_dirs[@]}
            do
              echo "[CD] $dir application image build..."
              if [ $dir == web ]; then
                docker build -t ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-web-front:latest ./web/front
                docker push ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-web-front:latest
                docker build -t ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-web-back:latest ./web/back
                docker push ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-web-back:latest
              else
                docker build -t ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-$dir:latest ./$dir
                docker push ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-$dir:latest
              fi
              echo "[CD] $dir application image pushed to Docker Hub..."
            done
   
    outputs:
      DIRS: $DIRS

  deploy_containers:
    runs-on: ubuntu-latest
    needs: build_images
    steps:
      - name: 1. Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{secrets.GCP_PROJECT_ID}}
          service_account_key: ${{secrets.GCP_SA_KEY}}
          export_default_credentials: true

      - name: 2. Deploy to GCP Hosts
        env:
          DIRS: ${{needs.build_images.outpus.DIRS}}
        run: |
          target_dirs=($DIRS)
          for dir in ${target_dirs[@]}
            do
              echo "[CD] $dir application deploy..."
              if [$dir == web]; then
                STATUS=$(gcloud compute instances describe "app-server" --format="get(status)")
                if [ $STATUS == TERMINATED ]; then
                  echo "[CD] start app-server..."
                  gcloud compute instances start app-server
                elif [ $STATUS == RUNNING ]; then
                  echo "[CD] app-server is Running..."
                else
                  echo "[CD] app-server is in $STATUS state..."
                  continue
                fi
                echo "[CD] Deploy Web App"
                gcloud compute ssh ${GCP_SSH_USERNAME}@$app-server --command="docker pull ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-web-front:latest && docker stop front-app || true && docker rm front-app || true && docker run -d --name front-app -p 80:80 ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-web-front:latest"
                gcloud compute ssh ${GCP_SSH_USERNAME}@$app-server --command="docker pull ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-web-back:latest && docker stop back-app || true && docker rm back-app || true && docker run -d --name back-app -p 8080:8080 ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-web-back:latest"
              elif [$dir == database]; then
                STATUS=$(gcloud compute instances describe "database-server" --format="get(status)")
                if [ $STATUS == TERMINATED ]; then
                  echo "[CD] start database-server..."
                  gcloud compute instances start database-server
                elif [ $STATUS == RUNNING ]; then
                  echo "[CD] database-server is Running..."
                else
                  echo "[CD] database-server is in $STATUS state..."
                  continue
                fi
                echo "[CD] Deploy DB App"
                gcloud compute ssh ${GCP_SSH_USERNAME}@$database-server --command="docker pull ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-database:latest && docker stop db-app || true && docker rm db-app || true && docker run -d --name db-app -p 3306:3306 ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-db:latest"
              elif [$dir == ml]; then
                STATUS=$(gcloud compute instances describe "train-server" --format="get(status)")
                if [ $STATUS == TERMINATED ]; then
                  echo "[CD] start train-server..."
                  gcloud compute instances start train-server
                elif [ $STATUS == RUNNING ]; then
                  echo "[CD] train-server is Running..."
                else
                  echo "[CD] train-server is in $STATUS state..."
                  continue
                fi
                echo "[CD] Deploy ML App"
                gcloud compute ssh ${GCP_SSH_USERNAME}@$train-server --command="docker pull ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-ml:latest && docker stop ml-app || true && docker rm ml-app || true && docker run -d --name ml-app -p 8080:8080 ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-ml:latest"
              elif [$dir == batch]; then
                STATUS=$(gcloud compute instances describe "batch-server" --format="get(status)")
                if [ $STATUS == TERMINATED ]; then
                  echo "[CD] start batch-server..."
                  gcloud compute instances start batch-server
                elif [ $STATUS == RUNNING ]; then
                  echo "[CD] batch-server is Running..."
                else
                  echo "[CD] batch-server is in $STATUS state..."
                  continue
                fi
                echo "[CD] Deploy Batch App"
                gcloud compute ssh ${GCP_SSH_USERNAME}@$batch-server --command="docker pull ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-batch:latest && docker stop batch-app || true && docker rm batch-app || true && docker run -d --name batch-app -p 8080:8080 ${{secrets.DOCKER_HUB_USERNAME}}/mybasket-web:latest"
              else
                echo "[CD] Error: $dir"
              fi
            done
